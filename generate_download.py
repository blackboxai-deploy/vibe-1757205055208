#!/usr/bin/env python3
"""
Script para gerar arquivo ZIP com todos os arquivos do projeto MDM
"""
import os
import zipfile
from datetime import datetime

def create_project_zip():
    """Criar arquivo ZIP com todo o projeto"""
    
    # Nome do arquivo ZIP
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    zip_filename = f"sistema_mdm_completo_{timestamp}.zip"
    
    # Lista de arquivos e diret√≥rios para incluir
    files_to_include = [
        # Arquivos principais
        'app.py',
        'web_app.py',
        'simple_server.py',
        'init_system.py',
        'config.py',
        'requirements.txt',
        'TODO.md',
        'README.md',
        
        # Diret√≥rio database
        'database/__init__.py',
        'database/models.py',
        'database/database_manager.py',
        
        # Diret√≥rio utils
        'utils/__init__.py',
        'utils/auth.py',
        'utils/duplicate_detector.py',
        'utils/search_engine.py',
        'utils/audit_manager.py',
        'utils/import_export.py',
        'utils/validators.py',
        
        # Diret√≥rio pages
        'pages/__init__.py',
        
        # Diret√≥rio static
        'static/style.css'
    ]
    
    print(f"üì¶ Criando arquivo ZIP: {zip_filename}")
    print("=" * 50)
    
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        files_added = 0
        total_size = 0
        
        for file_path in files_to_include:
            if os.path.exists(file_path):
                zipf.write(file_path, file_path)
                file_size = os.path.getsize(file_path)
                total_size += file_size
                print(f"‚úÖ {file_path:<40} ({file_size:>6} bytes)")
                files_added += 1
            else:
                print(f"‚ö†Ô∏è  {file_path:<40} (n√£o encontrado)")
        
        # Adicionar arquivo de banco de dados se existir
        if os.path.exists('data/mdm_database.db'):
            zipf.write('data/mdm_database.db', 'data/mdm_database.db')
            file_size = os.path.getsize('data/mdm_database.db')
            total_size += file_size
            print(f"‚úÖ {'data/mdm_database.db':<40} ({file_size:>6} bytes)")
            files_added += 1
        
        print("=" * 50)
        print(f"üìä Total de arquivos inclu√≠dos: {files_added}")
        print(f"üìè Tamanho total dos arquivos: {total_size:,} bytes ({total_size/1024:.1f} KB)")
        
    # Mostrar informa√ß√µes do arquivo ZIP
    zip_size = os.path.getsize(zip_filename)
    print(f"üìÅ Arquivo ZIP criado: {zip_filename}")
    print(f"üì¶ Tamanho compactado: {zip_size:,} bytes ({zip_size/1024:.1f} KB)")
    print(f"üóúÔ∏è  Taxa de compress√£o: {((total_size - zip_size) / total_size * 100):.1f}%")
    
    return zip_filename

def create_download_guide():
    """Criar guia de download"""
    guide_content = """# üì• GUIA DE DOWNLOAD - Sistema MDM

## üéØ Arquivos Dispon√≠veis para Download

### üì¶ Arquivo Completo (ZIP)
Execute o comando para gerar o arquivo ZIP completo:
```bash
python3 generate_download.py
```

### üìã Arquivos Individuais
Voc√™ pode baixar os seguintes arquivos individualmente:

#### üöÄ Aplica√ß√µes Principais
- `simple_server.py` - Servidor HTTP principal (RECOMENDADO)
- `app.py` - Aplica√ß√£o Streamlit (alternativa)
- `web_app.py` - Aplica√ß√£o Flask (alternativa)
- `init_system.py` - Script de inicializa√ß√£o

#### ‚öôÔ∏è Configura√ß√£o
- `config.py` - Configura√ß√µes do sistema
- `requirements.txt` - Depend√™ncias Python

#### üóÑÔ∏è Banco de Dados
- `database/models.py` - Modelos de dados
- `database/database_manager.py` - Gerenciador CRUD
- `database/__init__.py` - Inicializador do m√≥dulo

#### üõ†Ô∏è Utilit√°rios
- `utils/auth.py` - Sistema de autentica√ß√£o
- `utils/duplicate_detector.py` - Detector de duplicatas
- `utils/search_engine.py` - Motor de busca
- `utils/audit_manager.py` - Sistema de auditoria
- `utils/import_export.py` - Import/Export CSV
- `utils/validators.py` - Validadores de dados
- `utils/__init__.py` - Inicializador do m√≥dulo

#### üé® Interface
- `static/style.css` - Estilos CSS
- `pages/__init__.py` - M√≥dulo de p√°ginas

#### üìö Documenta√ß√£o
- `TODO.md` - Status do projeto
- `README.md` - Manual completo

## üèóÔ∏è Instru√ß√µes de Instala√ß√£o

### 1. Download dos Arquivos
```bash
# Op√ß√£o A: Download do ZIP completo
python3 generate_download.py

# Op√ß√£o B: Clone/download arquivos individuais
mkdir sistema_mdm
cd sistema_mdm
# Baixe todos os arquivos listados acima
```

### 2. Estrutura de Diret√≥rios
Organize os arquivos na seguinte estrutura:
```
sistema_mdm/
‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ simple_server.py
‚îú‚îÄ‚îÄ web_app.py
‚îú‚îÄ‚îÄ init_system.py
‚îú‚îÄ‚îÄ config.py
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ TODO.md
‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îî‚îÄ‚îÄ database_manager.py
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ auth.py
‚îÇ   ‚îú‚îÄ‚îÄ duplicate_detector.py
‚îÇ   ‚îú‚îÄ‚îÄ search_engine.py
‚îÇ   ‚îú‚îÄ‚îÄ audit_manager.py
‚îÇ   ‚îú‚îÄ‚îÄ import_export.py
‚îÇ   ‚îî‚îÄ‚îÄ validators.py
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îî‚îÄ‚îÄ static/
    ‚îî‚îÄ‚îÄ style.css
```

### 3. Inicializa√ß√£o
```bash
# Inicializar o sistema
python3 init_system.py

# Executar o servidor
python3 simple_server.py
```

### 4. Acesso
- URL: http://localhost:8501/dashboard
- Login: admin
- Senha: admin123

## üìã Lista de Verifica√ß√£o

### ‚úÖ Arquivos Obrigat√≥rios
- [ ] simple_server.py (servidor principal)
- [ ] init_system.py (inicializador)
- [ ] config.py (configura√ß√µes)
- [ ] database/models.py (modelos)
- [ ] database/database_manager.py (CRUD)
- [ ] utils/auth.py (autentica√ß√£o)
- [ ] utils/duplicate_detector.py (duplicatas)

### ‚úÖ Arquivos Opcionais
- [ ] app.py (Streamlit - requer instala√ß√£o)
- [ ] web_app.py (Flask - alternativa)
- [ ] utils/search_engine.py (busca avan√ßada)
- [ ] utils/audit_manager.py (auditoria)
- [ ] utils/import_export.py (import/export)
- [ ] static/style.css (estilos)

## üö® Solu√ß√£o de Problemas

### Erro: "M√≥dulo n√£o encontrado"
- Verifique se todos os arquivos est√£o na estrutura correta
- Execute `python3 init_system.py` antes do servidor

### Erro: "Porta j√° em uso"
- Altere a porta no arquivo simple_server.py
- Ou mate o processo: `pkill -f python3`

### Erro: "Banco n√£o inicializado"
- Execute `python3 init_system.py`
- Verifique se a pasta `data/` foi criada

## üìû Suporte

Em caso de problemas:
1. Verifique a estrutura de diret√≥rios
2. Execute o inicializador: `python3 init_system.py`
3. Verifique os logs no terminal
4. Teste as APIs: `curl http://localhost:8501/health`

---
**Sistema MDM - Desenvolvido em Python üêç**
"""
    
    with open('DOWNLOAD_GUIDE.md', 'w', encoding='utf-8') as f:
        f.write(guide_content)
    
    print("‚úÖ DOWNLOAD_GUIDE.md criado")

def show_file_manifest():
    """Mostrar manifest dos arquivos"""
    print("\nüìã MANIFEST DE ARQUIVOS DO SISTEMA MDM")
    print("=" * 60)
    
    file_categories = {
        "üöÄ Aplica√ß√µes Principais": [
            "simple_server.py",
            "app.py", 
            "web_app.py",
            "init_system.py"
        ],
        "‚öôÔ∏è Configura√ß√£o": [
            "config.py",
            "requirements.txt"
        ],
        "üóÑÔ∏è Banco de Dados": [
            "database/__init__.py",
            "database/models.py",
            "database/database_manager.py"
        ],
        "üõ†Ô∏è Utilit√°rios": [
            "utils/__init__.py",
            "utils/auth.py",
            "utils/duplicate_detector.py",
            "utils/search_engine.py",
            "utils/audit_manager.py",
            "utils/import_export.py",
            "utils/validators.py"
        ],
        "üé® Interface": [
            "static/style.css",
            "pages/__init__.py"
        ],
        "üìö Documenta√ß√£o": [
            "TODO.md",
            "README.md"
        ]
    }
    
    total_files = 0
    total_size = 0
    
    for category, files in file_categories.items():
        print(f"\n{category}")
        print("-" * 30)
        
        for file_path in files:
            if os.path.exists(file_path):
                file_size = os.path.getsize(file_path)
                total_size += file_size
                status = "‚úÖ"
                size_info = f"({file_size:>5} bytes)"
            else:
                status = "‚ùå"
                size_info = "(n√£o encontrado)"
            
            print(f"{status} {file_path:<30} {size_info}")
            total_files += 1
    
    print("\n" + "=" * 60)
    print(f"üìä RESUMO:")
    print(f"   Total de arquivos: {total_files}")
    print(f"   Tamanho total: {total_size:,} bytes ({total_size/1024:.1f} KB)")
    print(f"   Arquivos encontrados: {len([f for cat in file_categories.values() for f in cat if os.path.exists(f)])}")

def main():
    """Fun√ß√£o principal"""
    print("üì• SISTEMA MDM - GERADOR DE DOWNLOAD")
    print("=" * 60)
    
    # Mostrar manifest
    show_file_manifest()
    
    # Criar guia de download
    print("\nüìù Criando guia de download...")
    create_download_guide()
    
    # Criar ZIP
    print("\nüì¶ Gerando arquivo ZIP...")
    zip_file = create_project_zip()
    
    print("\nüéâ ARQUIVOS PRONTOS PARA DOWNLOAD!")
    print("=" * 60)
    print(f"üì¶ Arquivo ZIP completo: {zip_file}")
    print(f"üìã Guia de download: DOWNLOAD_GUIDE.md")
    print()
    print("üí° COMO BAIXAR:")
    print("1. Execute este script para gerar o ZIP")
    print("2. Baixe o arquivo ZIP gerado")
    print("3. Ou baixe arquivos individuais conforme o guia")
    print()
    print("üöÄ COMO USAR:")
    print("1. Extraia o ZIP em seu computador")
    print("2. python3 init_system.py")
    print("3. python3 simple_server.py")
    print("4. Acesse: http://localhost:8501/dashboard")
    print("5. Login: admin / admin123")
    print("=" * 60)

if __name__ == "__main__":
    main()